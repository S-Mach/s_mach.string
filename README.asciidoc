= s_mach.string: String utility library
Lance Gatlin <lance.gatlin@gmail.com>
v1,28-Nov-2014
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

image:https://travis-ci.org/S-Mach/s_mach.string.svg[Build Status, link="https://travis-ci.org/S-Mach/s_mach.string"]
image:https://coveralls.io/repos/S-Mach/s_mach.string/badge.png[Test Coverage,link="https://coveralls.io/r/S-Mach/s_mach.string"]
image:https://www.codacy.com/project/badge/a88e6b8b04b74d619077e3e538692487[Codacy Badge,link="https://www.codacy.com/public/lancegatlin/s_mach.string"]
https://github.com/S-Mach/s_mach.string[Code]
http://s-mach.github.io/s_mach.string/#s_mach.string.package[Scaladoc]

+s_mach.string+ is an open-source Scala library that provides primitives for
string manipulation beyond the standard library. s_mach.string supports
word-level string manipulations using an arbitrary word definition (e.g.
delimited by whitespace,  camel case, etc). s_mach.string also provides a
variety of find-replace methods.

== Include in SBT
1. Add to +build.sbt+
+
[source,sbt,numbered]
----
libraryDependencies += "net.s_mach" %% "string" % "1.1.1"
----
NOTE: +s_mach.string+ is currently only compiled for Scala 2.11 (though 2.10.4
support can be added if there is interest)

== Versioning
+s_mach.string+ uses semantic versioning (http://semver.org/). +s_mach.string+
does not use the package private modifier. Instead, all code files outside of
the +s_mach.string.impl+ package form the public interface and are governed by
the rules of semantic versioning. Code files inside the +s_mach.string.impl+
package may be used by downstream applications and libraries. However, no
guarantees are made as to the stability or interface of code in the
+s_mach.string.impl+ package between versions.

== Features

* Define semantics of words in strings by choosing which implicit WordSplitter
to import
** Import any of 3 provided WordSplitters:
*** +import WordSplitter.Whitespace+
*** +import WordSplitter.Underscore+
*** +import WordSplitter.CamelCase+
** Or create a custom RegexCharWordSplitter or RegexCharTransitionWordSplitter
** Or provide a completely custom word splitting implementation
** Split and preserve the "glue" between words for reconstructing the original
string's structure (see WordSplitResult)

* Find-replace using a variety of input types
** Search by regex, String, or Seq[String]
** Replace by function (+Match => String+) or String literal
** Match only words
** Match case sensitive or insensitive

* Adds utility String methods:
** +String.ensureSuffix+
** +String.mapWords+
** +String.collapseGlue+
** +String.collapseWhitespace+
** +String.toProperCase+
** +String.toTitleCase+
** +String.toCamelCase+
** +String.toPascalCase+
** +String.toSnakeCase+
** +String.toWords+
** +String.toWordsWithGlue+
** +String.indent+
** +String.toOption+
** +String.toDoubleOpt+
** +String.toLongOpt+
** +String.toIntOpt+
** +String.convert+

* Work char group regex patterns using CharGroup, CharGroupPattern & CharGroupRegex
== Examples

----
[info] Starting scala interpreter...
[info] 
Welcome to Scala version 2.11.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_72).
Type in expressions to have them evaluated.
Type :help for more information.

scala> import s_mach.string._
import s_mach.string._

scala> :paste
// Entering paste mode (ctrl-D to finish)

val sentence = "the_rain_in__spain falls  on the Plain"

// Split on whitespace
val example1 = {
  import WordSplitter.Whitespace
  sentence.toWords.toList
}

// Split on underscore
val example2 = {
  import WordSplitter.Underscore
  sentence.toWords.toList
}

// Split on whitespace or underscore
val example3 = {
  import WordSplitter.WhitespaceOrUnderscore
  sentence.toWords.toList
}

// Exiting paste mode, now interpreting.

sentence: String = the_rain_in__spain falls  on the Plain
example1: List[String] = List(the_rain_in__spain, falls, on, the, Plain)
example2: List[String] = List(the, rain, in, spain falls  on the Plain)
example3: List[String] = List(the, rain, in, spain, falls, on, the, Plain)

scala> :paste
// Entering paste mode (ctrl-D to finish)

// find replace on words (delimited by whitespace)
val example4 = {
  import WordSplitter.Whitespace
  sentence.findReplaceWords(Seq(("spain", "france"),("plain","savanna")), caseSensitive = false)
}

// find replace on words (delimited by whitespace or underscore)
val example5 = {
  import WordSplitter.WhitespaceOrUnderscore
  sentence.findReplaceWords(Seq(("spain", "france"),("plain","savanna")), caseSensitive = true)
}

// Exiting paste mode, now interpreting.

example4: String = the_rain_in__spain falls  on the savanna
example5: String = the_rain_in__france falls  on the Plain

scala> :paste

// find matching regex and append '!' to each match
val example6 = {
  sentence.findRegexReplaceMatch(Seq(("[a-z]*ain".r,{ m => m.toString + "!" })))
}

// Exiting paste mode, now interpreting.

example6: String = the_rain!_in__spain! falls  on the Plain!

scala>
----
